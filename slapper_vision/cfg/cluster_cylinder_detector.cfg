#!/usr/bin/env python
PACKAGE = "slapper_vision"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("LAB_threshold",    double_t,    0, "Threshold value for LAB colour space segmentation", 15,  0, 200)
gen.add("vg_leaf",    double_t,    0, "Voxel grid leaf size all directions [m]", 0.01,  0, 0.2)
gen.add("pt_min",    double_t,    0, "Passthrough filter minimum distance [m]", 0.0,  0, 2)
gen.add("pt_max",    double_t,    0, "Passthrough filter maximum distance [m]", 4.0,  2, 10)
gen.add("cluster_tolerance",    double_t,    0, "Euclidean clustering distance tolerance [m]", 0.01,  0, 0.2)
gen.add("cluster_size_perc_min",    double_t,    0, "Minimum cluster size as percentage of cloud", 0.01,  0.001, 1)
gen.add("cluster_size_perc_max",    double_t,    0, "Maximum cluster size as percentage of cloud", 0.1,  0.01, 1)
gen.add("normal_k",    int_t,    0, "k-nearest neighbours considered for normal esitmation", 50,  1, 500)
gen.add("cylinder_normal_distance",    double_t,    0, "Relative weight given to the angular distance between point normals and the plane normal", 0.1,  0, 1)
gen.add("cylinder_max_iterations",    int_t,    0, "Maximum number of iterations used to fit cylinder model", 10000,  1000, 100000)
gen.add("cylinder_inlier_distance",    double_t,    0, "Threshold distance for a point to be considered an inlier during RANSAC fitting [m]", 0.02,  0, 0.5)
gen.add("cylinder_radius_min",    double_t,    0, "Minimum cylinder radius used for fitting [m]", 0.05,  0, 0.2)
gen.add("cylinder_radius_max",    double_t,    0, "Maximum cylinder radius used for fitting [m]", 0.07,  0, 1)
gen.add("cylinder_scoring_distance",    double_t,    0, "This factor is multiplied by the cylinder radius and if points are within the resulting distance they are considered inliers during the fit scoring", 0.5,  0.01, 2)
gen.add("optimise_cylinder",    bool_t,    0, "Boolean flag determining if RANSAC cylinder model coefficients are optimised", True)
gen.add("cylinder_min_roll",    double_t, 0, "Minimum angle in camera YZ-plane for detected cylinder axes [deg]",0.0, 0.0, 90.0)
gen.add("cylinder_max_roll",    double_t, 0, "Maximum angle in camera YZ-plane for detected cylinder axes [deg]",90.0, 0.0, 90.0)
gen.add("cylinder_min_pitch",   double_t, 0, "Minimum angle in camera XZ-plane for detected cylinder axes [deg]",0.0, 0.0, 90.0)
gen.add("cylinder_max_pitch",   double_t, 0, "Maximum angle in camera XZ-plane for detected cylinder axes [deg]",90.0, 0.0, 90.0)
gen.add("cylinder_min_yaw",     double_t, 0, "Minimum angle in camera XY-plane for detected cylinder axes [deg]",0.0, 0.0, 90.0)
gen.add("cylinder_max_yaw",     double_t, 0, "Maximum angle in camera XY-plane for detected cylinder axes [deg]",90.0, 0.0, 90.0)

exit(gen.generate(PACKAGE, "cluster_cylinder_detector", "cluster_cylinder_detector"))
